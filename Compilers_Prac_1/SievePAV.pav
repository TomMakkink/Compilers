// Sieve of Eratosthenes for finding primes 2 <= n <= Max (Parva version)
// P.D. Terry,  Rhodes University, 2017
// Prac Group G: Tom Makkink, Jeffrey Skeen, Luke des Tombe

int mod8(int x){                               // ADDED MOD FUNCTION
	int result = x / 8;
	result = result * 8;
	result = x - result;
	return result;
}

  void Main() {
    const Max = 32000;
    bool[] uncrossed = new bool[Max];          // the sieve
    int i, n, k, it, iterations, primes = 0;   // counters
    //read("How many iterations? ", iterations);
    iterations = 10000;
	bool display = iterations == 1;					       
    //read("Supply largest number to be tested ", n);
    n = 10000;
	if (n > Max) {
      write("n too large, sorry");
      return;
    }
    write("Prime numbers between 2 and " , n, "\n");
    write("-----------------------------------\n");
    it = 1;
    while (it <= iterations) {				   // REMOVED 'DO' KEYWORD
      primes = 0;
      i = 2;
      while (i <= n) {                         // clear sieve
        uncrossed[i-2] = true;
        i = i + 1;
      }
      i = 2;								  //FIXED COMMENT BELOW
      while (i < n) {                         /* the passes over the sieve */
        if (uncrossed[i-2]) {
          if (display && (mod8(primes) == 0)) { 
			write("\n");  // ensure line not too long
		  }
          primes = primes + 1;
          if (display) write(i, "\t");
          k = i;                               // now cross out multiples of i
          while (k <= n) {					   // REMOVED 'DO' KEYWORD
            uncrossed[k-2] = false;
            k = k + i;						   // CHANGED K += 1
          }
        }
		i = i + 1;							   // CHANGED i += i
      }
      it = it + 1;
      if (display) write("\n");                
    }
    write(" primes", primes);                  // CHANGED STRING TO BE IN FIRST PARAMETER 
  } // Main
